{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "dc69cb9f_0dea9833",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2022-06-03T22:21:13Z",
      "side": 1,
      "message": "I don\u0027t follow, why would it double free if it lives in a specific implementation file?",
      "revId": "c14f1111822350b73958f57f4cedb344459d323d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "246e86d6_518cb8e1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2022-06-03T22:34:40Z",
      "side": 1,
      "message": "I have no idea.\n\nbut I got\n\n```\nJan 01 00:56:43 X.prod.google.com ipmid[8395]: Received signal; quitting\nJan 01 00:56:44 X.prod.google.com ipmid[8395]: \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nJan 01 00:56:44 X.prod.google.com ipmid[8395]: \u003d\u003d8395\u003d\u003dERROR: AddressSanitizer: attempting double-free on 0xa2e024b0 in thread T0:\nJan 01 00:56:44 X.prod.google.com ipmid[8395]:     #0 0xa6a8e474 in operator delete(void*, unsigned int) (/usr/lib/libasan.so.6+0xbe474)\nJan 01 00:56:44 X.prod.google.com ipmid[8395]: 0xa2e024b0 is located 0 bytes inside of 8-byte region [0xa2e024b0,0xa2e024b8)\nJan 01 00:56:44 X.prod.google.com ipmid[8395]: freed by thread T0 here:\nJan 01 00:56:44 X.prod.google.com ipmid[8395]:     #0 0xa6a8e474 in operator delete(void*, unsigned int) (/usr/lib/libasan.so.6+0xbe474)\nJan 01 00:56:44 X.prod.google.com ipmid[8395]:     #1 0x9f945a6c in __gnu_cxx::new_allocator\u003cnlohmann::basic_json\u003cstd::map, std::vector, std::__cxx11::basic_string\u003cchar, std::char_traits\u003cchar\u003e, std::allocator\u003cchar\u003e \u003e, bool, long long, unsigned long long, double, std::allocator, nlohmann::adl_serializer, std::vector\u003cunsigned char, std::allocator\u003cunsigned char\u003e \u003e \u003e*\u003e::deallocate(nlohmann::basic_json\u003cstd::map, std::vector, std::__cxx11::basic_string\u003cchar, std::char_traits\u003cchar\u003e, std::allocator\u003cchar\u003e \u003e, bool, long long, unsigned long long, double, std::allocator, nlohmann::adl_serializer, std::vector\u003cunsigned char, std::allocator\u003cunsigned char\u003e \u003e \u003e**, unsigned int) /usr/include/c++/11.3.0/ext/new_allocator.h:145\nJan 01 00:56:44 X.prod.google.com ipmid[8395]:     #2 0x9f945a6c in std::allocator\u003cchar const*\u003e::deallocate(char const**, unsigned int) /usr/include/c++/11.3.0/bits/allocator.h:199\nJan 01 00:56:44 X.prod.google.com ipmid[8395]:     #3 0x9f945a6c in std::allocator_traits\u003cstd::allocator\u003cchar const*\u003e \u003e::deallocate(std::allocator\u003cchar const*\u003e\u0026, char const**, unsigned int) /usr/include/c++/11.3.0/bits/alloc_traits.h:496\nJan 01 00:56:44 X.prod.google.com ipmid[8395]:     #4 0x9f945a6c in std::_Vector_base\u003cchar const*, std::allocator\u003cchar const*\u003e \u003e::_M_deallocate(char const**, unsigned int) /usr/include/c++/11.3.0/bits/stl_vector.h:354\nJan 01 00:56:44 X.prod.google.com ipmid[8395]:     #5 0x9f945a6c in std::_Vector_base\u003cchar const*, std::allocator\u003cchar const*\u003e \u003e::~_Vector_base() /usr/include/c++/11.3.0/bits/stl_vector.h:335\nJan 01 00:56:44 X.prod.google.com ipmid[8395]:     #6 0x9f945a6c in std::vector\u003cchar const*, std::allocator\u003cchar const*\u003e \u003e::~vector() /usr/include/c++/11.3.0/bits/stl_vector.h:683\nJan 01 00:56:44 X.prod.google.com ipmid[8395]: previously allocated by thread T0 here:\nJan 01 00:56:44 X.prod.google.com ipmid[8395]:     #0 0xa6a8d3e4 in operator new(unsigned int) (/usr/lib/libasan.so.6+0xbd3e4)\nJan 01 00:56:44 X.prod.google.com ipmid[8395]:     #1 0x9f77da20 in __gnu_cxx::new_allocator\u003cunsigned long\u003e::allocate(unsigned int, void const*) /usr/include/c++/11.3.0/ext/new_allocator.h:127\nJan 01 00:56:44 X.prod.google.com ipmid[8395]:     #2 0x9f77da20 in std::allocator\u003cnlohmann::basic_json\u003cstd::map, std::vector, std::__cxx11::basic_string\u003cchar, std::char_traits\u003cchar\u003e, std::allocator\u003cchar\u003e \u003e, bool, long long, unsigned long long, double, std::allocator, nlohmann::adl_serializer, std::vector\u003cunsigned char, std::allocator\u003cunsigned char\u003e \u003e \u003e*\u003e::allocate(unsigned int) /usr/include/c++/11.3.0/bits/allocator.h:185\nJan 01 00:56:44 X.prod.google.com ipmid[8395]:     #3 0x9f77da20 in std::allocator_traits\u003cstd::allocator\u003cnlohmann::basic_json\u003cstd::map, std::vector, std::__cxx11::basic_string\u003cchar, std::char_traits\u003cchar\u003e, std::allocator\u003cchar\u003e \u003e, bool, long long, unsigned long long, double, std::allocator, nlohmann::adl_serializer, std::vector\u003cunsigned char, std::allocator\u003cunsigned char\u003e \u003e \u003e*\u003e \u003e::allocate(std::allocator\u003cnlohmann::basic_json\u003cstd::map, std::vector, std::__cxx11::basic_string\u003cchar, std::char_traits\u003cchar\u003e, std::allocator\u003cchar\u003e \u003e, bool, long long, unsigned long long, double, std::allocator, nlohmann::adl_serializer, std::vector\u003cunsigned char, std::allocator\u003cunsigned char\u003e \u003e \u003e*\u003e\u0026, unsigned int) /usr/include/c++/11.3.0/bits/alloc_traits.h:464\nJan 01 00:56:44 X.prod.google.com ipmid[8395]:     #4 0x9f77da20 in std::_Vector_base\u003cnlohmann::basic_json\u003cstd::map, std::vector, std::__cxx11::basic_string\u003cchar, std::char_traits\u003cchar\u003e, std::allocator\u003cchar\u003e \u003e, bool, long long, unsigned long long, double, std::allocator, nlohmann::adl_serializer, std::vector\u003cunsigned char, std::allocator\u003cunsigned char\u003e \u003e \u003e*, std::allocator\u003cnlohmann::basic_json\u003cstd::map, std::vector, std::__cxx11::basic_string\u003cchar, std::char_traits\u003cchar\u003e, std::allocator\u003cchar\u003e \u003e, bool, long long, unsigned long long, double, std::allocator, nlohmann::adl_serializer, std::vector\u003cunsigned char, std::allocator\u003cunsigned char\u003e \u003e \u003e*\u003e \u003e::_M_allocate(unsigned int) /usr/include/c++/11.3.0/bits/stl_vector.h:346\nJan 01 00:56:44 X.prod.google.com ipmid[8395]:     #5 0x9f77da20 in std::_Vector_base\u003cchar const*, std::allocator\u003cchar const*\u003e \u003e::_M_allocate(unsigned int) /usr/include/c++/11.3.0/bits/stl_vector.h:343\nJan 01 00:56:44 X.prod.google.com ipmid[8395]:     #6 0x9f77da20 in void std::vector\u003cchar const*, std::allocator\u003cchar const*\u003e \u003e::_M_range_initialize\u003cchar const* const*\u003e(char const* const*, char const* const*, std::forward_iterator_tag) /usr/include/c++/11.3.0/bits/stl_vector.h:1582\nJan 01 00:56:44 X.prod.google.com ipmid[8395]:     #7 0x9f77da20 in std::vector\u003cchar const*, std::allocator\u003cchar const*\u003e \u003e::vector(std::initializer_list\u003cchar const*\u003e, std::allocator\u003cchar const*\u003e const\u0026) /usr/include/c++/11.3.0/bits/stl_vector.h:629\nJan 01 00:56:44 X.prod.google.com ipmid[8395]:     #8 0x9f77da20 in __static_initialization_and_destruction_0 ../git/bmc/buildjson.cpp:71\nJan 01 00:56:44 X.prod.google.com ipmid[8395]:     #9 0x9f77da20 in _GLOBAL__sub_I_buildjson.cpp ../git/bmc/buildjson.cpp:76\nJan 01 00:56:44 X.prod.google.com ipmid[8395]: SUMMARY: AddressSanitizer: double-free (/usr/lib/libasan.so.6+0xbe474) in operator delete(void*, unsigned int)\nJan 01 00:56:44 X.prod.google.com ipmid[8395]: \u003d\u003d8395\u003d\u003dABORTING\n```\n\nAnd Peter suggested. https://engdoc.corp.google.com/eng/doc/devguide/cpp/styleguide.md?cl\u003dhead#Static_and_Global_Variables",
      "parentUuid": "dc69cb9f_0dea9833",
      "revId": "c14f1111822350b73958f57f4cedb344459d323d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e6e0b02_929d3be6",
        "filename": "bmc/buildjson.hpp",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2022-06-03T22:21:13Z",
      "side": 1,
      "message": "nit: c++20 should allow partial template deduction (you can remove the number of elements)?",
      "revId": "c14f1111822350b73958f57f4cedb344459d323d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4a2a7f18_78c71f22",
        "filename": "bmc/buildjson.hpp",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2022-06-03T22:37:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0e6e0b02_929d3be6",
      "revId": "c14f1111822350b73958f57f4cedb344459d323d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}